<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGetInspectorApp</name>
    </assembly>
    <members>
        <member name="T:NuGetInspectorApp.Configuration.AppConfiguration">
            <summary>
            Configuration settings for the NuGet Inspector application.
            </summary>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.AppConfiguration.NuGetApiBaseUrl">
            <summary>
            Gets or sets the base URL for the NuGet API registration endpoint.
            </summary>
            <value>The NuGet API base URL. Default is "https://api.nuget.org/v3/registration5-gz-semver2".</value>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.AppConfiguration.NuGetGalleryBaseUrl">
            <summary>
            Gets or sets the base URL for the NuGet Gallery.
            </summary>
            <value>The NuGet Gallery base URL. Default is "https://www.nuget.org/packages".</value>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.AppConfiguration.MaxConcurrentRequests">
            <summary>
            Gets or sets the maximum number of concurrent HTTP requests allowed.
            </summary>
            <value>The maximum concurrent requests. Default is 5.</value>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.AppConfiguration.HttpTimeoutSeconds">
            <summary>
            Gets or sets the HTTP request timeout in seconds.
            </summary>
            <value>The HTTP timeout in seconds. Default is 30.</value>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.AppConfiguration.MaxRetryAttempts">
            <summary>
            Gets or sets the maximum number of retry attempts for failed HTTP requests.
            </summary>
            <value>The maximum retry attempts. Default is 3.</value>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.AppConfiguration.RetryDelaySeconds">
            <summary>
            Gets or sets the delay in seconds between retry attempts for failed HTTP requests.
            </summary>
            <value>The retry delay in seconds. Default is 2.</value>
        </member>
        <member name="M:NuGetInspectorApp.Configuration.AppConfiguration.Validate">
            <summary>
            Validates the configuration settings and throws exceptions if any values are out of range.
            </summary>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.AppConfiguration.VerboseLogging">
            <summary>
            Gets or sets a value indicating whether verbose logging is enabled.
            </summary>
            <value><c>true</c> if verbose logging is enabled; otherwise, <c>false</c>. Default is <c>false</c>.</value>
        </member>
        <member name="T:NuGetInspectorApp.Configuration.CommandLineOptions">
            <summary>
            Represents command line options for the NuGet Inspector application.
            </summary>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.CommandLineOptions.SolutionPath">
            <summary>
            Gets or sets the path to the solution file to analyze.
            </summary>
            <value>The solution file path.</value>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.CommandLineOptions.OutputFormat">
            <summary>
            Gets or sets the output format for the report.
            </summary>
            <value>The output format. Supported values: console, html, markdown, json. Default is "console".</value>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.CommandLineOptions.OutputFile">
            <summary>
            Gets or sets the output file path for saving the report.
            </summary>
            <value>The output file path, or <c>null</c> to output to console.</value>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.CommandLineOptions.VerboseOutput">
            <summary>
            Gets or sets a value indicating whether verbose output is enabled.
            </summary>
            <value><c>true</c> if verbose output is enabled; otherwise, <c>false</c>. Default is <c>false</c>.</value>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.CommandLineOptions.OnlyOutdated">
            <summary>
            Gets or sets a value indicating whether to show only outdated packages.
            </summary>
            <value><c>true</c> to show only outdated packages; otherwise, <c>false</c>. Default is <c>false</c>.</value>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.CommandLineOptions.OnlyVulnerable">
            <summary>
            Gets or sets a value indicating whether to show only vulnerable packages.
            </summary>
            <value><c>true</c> to show only vulnerable packages; otherwise, <c>false</c>. Default is <c>false</c>.</value>
        </member>
        <member name="P:NuGetInspectorApp.Configuration.CommandLineOptions.OnlyDeprecated">
            <summary>
            Gets or sets a value indicating whether to show only deprecated packages.
            </summary>
            <value><c>true</c> to show only deprecated packages; otherwise, <c>false</c>. Default is <c>false</c>.</value>
        </member>
        <member name="T:NuGetInspectorApp.Formatters.ConsoleReportFormatter">
            <summary>
            Provides console-friendly formatting for package analysis reports.
            </summary>
            <remarks>
            This formatter generates human-readable text output suitable for console display,
            with clear hierarchical structure and detailed package information including
            dependencies, vulnerabilities, and deprecation status.
            </remarks>
        </member>
        <member name="M:NuGetInspectorApp.Formatters.ConsoleReportFormatter.FormatReportAsync(System.Collections.Generic.List{NuGetInspectorApp.Models.ProjectInfo},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,NuGetInspectorApp.Models.MergedPackage}},System.Collections.Generic.Dictionary{System.String,NuGetInspectorApp.Models.PackageMetadata},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:NuGetInspectorApp.Formatters.ConsoleReportFormatter.FormatDirectPackages(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,NuGetInspectorApp.Models.MergedPackage},System.Collections.Generic.Dictionary{System.String,NuGetInspectorApp.Models.PackageMetadata})">
            <summary>
            Formats direct package dependencies for the console output.
            </summary>
            <param name="sb">The StringBuilder to append formatted output to.</param>
            <param name="merged">The collection of merged packages to format.</param>
            <param name="packageMetadata">The package metadata dictionary for additional details.</param>
        </member>
        <member name="M:NuGetInspectorApp.Formatters.ConsoleReportFormatter.FormatVersionInformation(System.Text.StringBuilder,NuGetInspectorApp.Models.MergedPackage)">
            <summary>
            Formats version information for a package.
            </summary>
            <param name="sb">The StringBuilder to append formatted output to.</param>
            <param name="pkg">The package to format version information for.</param>
        </member>
        <member name="M:NuGetInspectorApp.Formatters.ConsoleReportFormatter.FormatDeprecationInformation(System.Text.StringBuilder,NuGetInspectorApp.Models.MergedPackage)">
            <summary>
            Formats deprecation information for a package.
            </summary>
            <param name="sb">The StringBuilder to append formatted output to.</param>
            <param name="pkg">The package to format deprecation information for.</param>
        </member>
        <member name="M:NuGetInspectorApp.Formatters.ConsoleReportFormatter.FormatVulnerabilityInformation(System.Text.StringBuilder,NuGetInspectorApp.Models.MergedPackage)">
            <summary>
            Formats vulnerability information for a package.
            </summary>
            <param name="sb">The StringBuilder to append formatted output to.</param>
            <param name="pkg">The package to format vulnerability information for.</param>
        </member>
        <member name="M:NuGetInspectorApp.Formatters.ConsoleReportFormatter.FormatDependencyInformation(System.Text.StringBuilder,NuGetInspectorApp.Models.MergedPackage,System.Collections.Generic.Dictionary{System.String,NuGetInspectorApp.Models.PackageMetadata},System.String)">
            <summary>
            Formats dependency information for a package.
            </summary>
            <param name="sb">The StringBuilder to append formatted output to.</param>
            <param name="pkg">The package to format dependency information for.</param>
            <param name="packageMetadata">The package metadata dictionary.</param>
            <param name="metaKey">The metadata key for the current package.</param>
        </member>
        <member name="M:NuGetInspectorApp.Formatters.ConsoleReportFormatter.FormatTransitivePackages(System.Text.StringBuilder,NuGetInspectorApp.Models.FrameworkInfo)">
            <summary>
            Formats transitive package information for a framework.
            </summary>
            <param name="sb">The StringBuilder to append formatted output to.</param>
            <param name="fw">The framework containing transitive packages.</param>
        </member>
        <member name="T:NuGetInspectorApp.Formatters.IReportFormatter">
            <summary>
            Defines the contract for formatting package analysis reports into different output formats.
            </summary>
            <remarks>
            Implementations of this interface are responsible for taking the raw package analysis data
            and converting it into a human-readable or machine-readable format. The formatter receives
            project information, merged package data, and detailed package metadata to create comprehensive reports.
            </remarks>
        </member>
        <member name="M:NuGetInspectorApp.Formatters.IReportFormatter.FormatReportAsync(System.Collections.Generic.List{NuGetInspectorApp.Models.ProjectInfo},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,NuGetInspectorApp.Models.MergedPackage}},System.Collections.Generic.Dictionary{System.String,NuGetInspectorApp.Models.PackageMetadata},System.Threading.CancellationToken)">
            <summary>
            Asynchronously formats a package analysis report based on the provided data.
            </summary>
            <param name="projects">The collection of projects analyzed, containing framework and package information.</param>
            <param name="mergedPackages">
            A dictionary of merged package information keyed by "{ProjectPath}|{Framework}",
            with values being dictionaries of packages keyed by package ID.
            </param>
            <param name="packageMetadata">
            A dictionary of detailed package metadata keyed by "{PackageId}|{Version}",
            containing additional information fetched from the NuGet API.
            </param>
            <param name="cancellationToken">A cancellation token to cancel the formatting operation.</param>
            <returns>
            A task that represents the asynchronous formatting operation.
            The task result contains the formatted report as a string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="projects"/>, <paramref name="mergedPackages"/>, 
            or <paramref name="packageMetadata"/> is null.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            Thrown when the operation is cancelled via the <paramref name="cancellationToken"/>.
            </exception>
            <example>
            <code>
            var formatter = new ConsoleReportFormatter();
            var report = await formatter.FormatReportAsync(projects, mergedPackages, metadata);
            Console.WriteLine(report);
            </code>
            </example>
        </member>
        <member name="T:NuGetInspectorApp.Models.DotnetListReport">
            <summary>
            Represents the root object for dotnet list package JSON output.
            </summary>
            <remarks>
            This class is used to deserialize the JSON output from 'dotnet list package --format json' commands,
            which provides information about packages across multiple projects in a solution.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.DotnetListReport.Projects">
            <summary>
            Gets or sets the collection of projects included in the report.
            </summary>
            <value>A list of <see cref="T:NuGetInspectorApp.Models.ProjectInfo"/> objects representing each project in the solution, or <c>null</c> if no projects are found.</value>
        </member>
        <member name="T:NuGetInspectorApp.Models.ProjectInfo">
            <summary>
            Represents information about a single project within a solution.
            </summary>
            <remarks>
            Contains the project path and framework-specific package information.
            A single project can target multiple frameworks, each with its own set of packages.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.ProjectInfo.Path">
            <summary>
            Gets or sets the file system path to the project file.
            </summary>
            <value>The absolute or relative path to the .csproj, .vbproj, or .fsproj file.</value>
        </member>
        <member name="P:NuGetInspectorApp.Models.ProjectInfo.Frameworks">
            <summary>
            Gets or sets the collection of target frameworks and their associated packages.
            </summary>
            <value>A list of <see cref="T:NuGetInspectorApp.Models.FrameworkInfo"/> objects, one for each target framework in the project.</value>
        </member>
        <member name="T:NuGetInspectorApp.Models.FrameworkInfo">
            <summary>
            Represents package information for a specific target framework within a project.
            </summary>
            <remarks>
            Each framework can have different sets of packages due to conditional package references
            or framework-specific dependencies.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.FrameworkInfo.Framework">
            <summary>
            Gets or sets the target framework moniker (TFM).
            </summary>
            <value>The target framework identifier such as "net9.0", "netstandard2.0", or "net48".</value>
            <example>
            Common values include:
            <list type="bullet">
            <item><description>net9.0 - .NET 9.0</description></item>
            <item><description>net8.0 - .NET 8.0</description></item>
            <item><description>netstandard2.0 - .NET Standard 2.0</description></item>
            <item><description>net48 - .NET Framework 4.8</description></item>
            </list>
            </example>
        </member>
        <member name="P:NuGetInspectorApp.Models.FrameworkInfo.TopLevelPackages">
            <summary>
            Gets or sets the collection of top-level (directly referenced) packages.
            </summary>
            <value>A list of <see cref="T:NuGetInspectorApp.Models.PackageReference"/> objects representing packages explicitly referenced in the project file.</value>
            <remarks>
            Top-level packages are those explicitly added to the project via PackageReference elements
            or through package manager commands, as opposed to transitive dependencies.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.FrameworkInfo.TransitivePackages">
            <summary>
            Gets or sets the collection of transitive (indirectly referenced) packages.
            </summary>
            <value>A list of <see cref="T:NuGetInspectorApp.Models.PackageReference"/> objects representing packages that are dependencies of top-level packages.</value>
            <remarks>
            Transitive packages are automatically included as dependencies of top-level packages.
            They are not explicitly referenced in the project file but are required at runtime.
            </remarks>
        </member>
        <member name="T:NuGetInspectorApp.Models.PackageReference">
            <summary>
            Represents a NuGet package reference with version information.
            </summary>
            <remarks>
            This class contains both the requested version (from project file or package.config)
            and the resolved version (actually used after dependency resolution).
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageReference.Id">
            <summary>
            Gets or sets the package identifier.
            </summary>
            <value>The unique package ID as published on NuGet.org or other package sources.</value>
            <example>Microsoft.Extensions.Logging, Newtonsoft.Json, AutoMapper</example>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageReference.RequestedVersion">
            <summary>
            Gets or sets the version or version range requested in the project file.
            </summary>
            <value>The version specification as written in the project file, which may include ranges, wildcards, or floating versions.</value>
            <example>
            Examples include:
            <list type="bullet">
            <item><description>9.0.0 - Exact version</description></item>
            <item><description>[9.0.0,) - Minimum version with no upper bound</description></item>
            <item><description>9.* - Floating version (latest 9.x)</description></item>
            </list>
            </example>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageReference.ResolvedVersion">
            <summary>
            Gets or sets the actual version resolved and used by the project.
            </summary>
            <value>The specific version number that was selected by the package resolution algorithm.</value>
            <remarks>
            This is always a specific version number (e.g., "9.0.1") even if the requested version
            was a range or floating version. This represents the version actually downloaded and used.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageReference.LatestVersion">
            <summary>
            Gets or sets the latest available version of the package.
            </summary>
            <value>The newest version available from the package source, or <c>null</c> if version information is unavailable.</value>
            <remarks>
            This property is populated by 'dotnet list package --outdated' commands and indicates
            whether an update is available for the package.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageReference.HasVulnerabilities">
            <summary>
            Gets or sets a value indicating whether the package has known vulnerabilities.
            </summary>
            <value><c>true</c> if the package version has reported security vulnerabilities; otherwise, <c>false</c>.</value>
            <remarks>
            This information comes from 'dotnet list package --vulnerable' commands and helps identify
            packages that should be updated for security reasons.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageReference.Vulnerabilities">
            <summary>
            Gets or sets the collection of known vulnerabilities for this package version.
            </summary>
            <value>A list of <see cref="T:NuGetInspectorApp.Models.VulnerabilityInfo"/> objects describing security issues, or <c>null</c> if no vulnerabilities are known.</value>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageReference.IsDeprecated">
            <summary>
            Gets or sets a value indicating whether the package is deprecated.
            </summary>
            <value><c>true</c> if the package is marked as deprecated by its maintainers; otherwise, <c>false</c>.</value>
            <remarks>
            Deprecated packages should generally be replaced with alternative packages recommended by the maintainers.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageReference.DeprecationReasons">
            <summary>
            Gets or sets the collection of reasons why the package is deprecated.
            </summary>
            <value>A list of deprecation reason strings, or <c>null</c> if the package is not deprecated.</value>
            <example>
            Common deprecation reasons include:
            <list type="bullet">
            <item><description>Legacy</description></item>
            <item><description>CriticalBugs</description></item>
            <item><description>Other</description></item>
            </list>
            </example>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageReference.Alternative">
            <summary>
            Gets or sets the alternative package recommendation for deprecated packages.
            </summary>
            <value>A <see cref="T:NuGetInspectorApp.Models.PackageAlternative"/> object suggesting a replacement package, or <c>null</c> if no alternative is specified.</value>
        </member>
        <member name="T:NuGetInspectorApp.Models.VulnerabilityInfo">
            <summary>
            Represents vulnerability information for a package.
            </summary>
            <remarks>
            Contains details about security vulnerabilities found in specific package versions,
            including severity levels and advisory URLs for more information.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.VulnerabilityInfo.Severity">
            <summary>
            Gets or sets the severity level of the vulnerability.
            </summary>
            <value>The vulnerability severity classification such as "Low", "Medium", "High", or "Critical".</value>
        </member>
        <member name="P:NuGetInspectorApp.Models.VulnerabilityInfo.AdvisoryUrl">
            <summary>
            Gets or sets the URL to the security advisory with detailed information.
            </summary>
            <value>A URL pointing to the official security advisory or vulnerability database entry.</value>
            <example>https://github.com/advisories/GHSA-xxxx-xxxx-xxxx</example>
        </member>
        <member name="T:NuGetInspectorApp.Models.PackageAlternative">
            <summary>
            Represents an alternative package recommendation for deprecated packages.
            </summary>
            <remarks>
            When a package is deprecated, maintainers may suggest a replacement package
            that provides similar functionality with continued support.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageAlternative.Id">
            <summary>
            Gets or sets the identifier of the recommended alternative package.
            </summary>
            <value>The package ID of the recommended replacement.</value>
            <example>System.Text.Json (as an alternative to Newtonsoft.Json)</example>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageAlternative.VersionRange">
            <summary>
            Gets or sets the recommended version range for the alternative package.
            </summary>
            <value>The version specification for the alternative package, typically a minimum version requirement.</value>
            <example>>=6.0.0</example>
        </member>
        <member name="T:NuGetInspectorApp.Models.MergedPackage">
            <summary>
            Represents merged package information combining data from multiple dotnet list commands.
            </summary>
            <remarks>
            This class consolidates information from 'dotnet list package', 'dotnet list package --outdated',
            'dotnet list package --deprecated', and 'dotnet list package --vulnerable' commands into a single object.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.MergedPackage.Id">
            <summary>
            Gets or sets the package identifier.
            </summary>
            <value>The unique package ID as published on package sources.</value>
        </member>
        <member name="P:NuGetInspectorApp.Models.MergedPackage.RequestedVersion">
            <summary>
            Gets or sets the version or version range requested in the project file.
            </summary>
            <value>The version specification as written in the project file.</value>
        </member>
        <member name="P:NuGetInspectorApp.Models.MergedPackage.ResolvedVersion">
            <summary>
            Gets or sets the actual version resolved and used by the project.
            </summary>
            <value>The specific version number selected by package resolution.</value>
        </member>
        <member name="P:NuGetInspectorApp.Models.MergedPackage.LatestVersion">
            <summary>
            Gets or sets the latest available version of the package.
            </summary>
            <value>The newest version available, or <c>null</c> if unknown.</value>
        </member>
        <member name="P:NuGetInspectorApp.Models.MergedPackage.IsOutdated">
            <summary>
            Gets or sets a value indicating whether the resolved version is outdated.
            </summary>
            <value><c>true</c> if a newer version is available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NuGetInspectorApp.Models.MergedPackage.IsDeprecated">
            <summary>
            Gets or sets a value indicating whether the package is deprecated.
            </summary>
            <value><c>true</c> if the package is marked as deprecated; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NuGetInspectorApp.Models.MergedPackage.DeprecationReasons">
            <summary>
            Gets or sets the collection of deprecation reasons.
            </summary>
            <value>A list of reasons why the package is deprecated.</value>
        </member>
        <member name="P:NuGetInspectorApp.Models.MergedPackage.Alternative">
            <summary>
            Gets or sets the alternative package recommendation.
            </summary>
            <value>The suggested replacement package, or <c>null</c> if none is specified.</value>
        </member>
        <member name="P:NuGetInspectorApp.Models.MergedPackage.Vulnerabilities">
            <summary>
            Gets or sets the collection of known vulnerabilities.
            </summary>
            <value>A list of security vulnerabilities affecting this package version.</value>
        </member>
        <member name="T:NuGetInspectorApp.Models.PackageMetadata">
            <summary>
            Represents detailed metadata about a package fetched from the NuGet API.
            </summary>
            <remarks>
            This class contains additional information not available from dotnet list commands,
            such as project URLs and dependency information.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageMetadata.PackageUrl">
            <summary>
            Gets or sets the URL to the package's gallery page.
            </summary>
            <value>The NuGet gallery URL for the specific package version.</value>
            <example>https://www.nuget.org/packages/Microsoft.Extensions.Logging/9.0.0</example>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageMetadata.ProjectUrl">
            <summary>
            Gets or sets the URL to the package's project or repository.
            </summary>
            <value>The project homepage or source repository URL, or <c>null</c> if not specified.</value>
            <example>https://github.com/dotnet/extensions</example>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageMetadata.DependencyGroups">
            <summary>
            Gets or sets the collection of dependency groups organized by target framework.
            </summary>
            <value>A list of <see cref="T:NuGetInspectorApp.Models.DependencyGroup"/> objects showing dependencies for each supported framework.</value>
        </member>
        <member name="T:NuGetInspectorApp.Models.DependencyGroup">
            <summary>
            Represents a group of dependencies for a specific target framework.
            </summary>
            <remarks>
            Packages can have different dependencies depending on the target framework,
            allowing for framework-specific optimizations and compatibility.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.DependencyGroup.TargetFramework">
            <summary>
            Gets or sets the target framework for this dependency group.
            </summary>
            <value>The target framework moniker, or an empty string for framework-agnostic dependencies.</value>
            <example>net9.0, netstandard2.0, net48</example>
        </member>
        <member name="P:NuGetInspectorApp.Models.DependencyGroup.Dependencies">
            <summary>
            Gets or sets the collection of package dependencies for this framework.
            </summary>
            <value>A list of <see cref="T:NuGetInspectorApp.Models.PackageDependency"/> objects representing required packages.</value>
        </member>
        <member name="T:NuGetInspectorApp.Models.PackageDependency">
            <summary>
            Represents a single package dependency with version constraints.
            </summary>
            <remarks>
            Package dependencies specify the packages required by another package,
            along with version ranges that define compatible versions.
            </remarks>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageDependency.Id">
            <summary>
            Gets or sets the identifier of the dependent package.
            </summary>
            <value>The package ID of the required dependency.</value>
        </member>
        <member name="P:NuGetInspectorApp.Models.PackageDependency.Range">
            <summary>
            Gets or sets the version range specification for the dependency.
            </summary>
            <value>The version constraint using NuGet version range syntax.</value>
            <example>
            Common range patterns:
            <list type="bullet">
            <item><description>9.0.0 - Exactly version 9.0.0</description></item>
            <item><description>[9.0.0,) - Version 9.0.0 or higher</description></item>
            <item><description>[9.0.0,10.0.0) - Version 9.0.0 up to but not including 10.0.0</description></item>
            </list>
            </example>
        </member>
        <member name="T:NuGetInspectorApp.Application.NuGetAuditApplication">
            <summary>
            Provides the main application logic for analyzing NuGet packages in .NET solutions.
            </summary>
            <remarks>
            This class orchestrates the entire package analysis workflow, including:
            <list type="bullet">
            <item><description>Fetching package reports from dotnet CLI commands</description></item>
            <item><description>Merging data from multiple report types (outdated, deprecated, vulnerable)</description></item>
            <item><description>Fetching detailed metadata from the NuGet API</description></item>
            <item><description>Applying user-specified filters</description></item>
            <item><description>Formatting and outputting results</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:NuGetInspectorApp.Application.NuGetAuditApplication.#ctor(NuGetInspectorApp.Services.INuGetApiService,NuGetInspectorApp.Services.IPackageAnalyzer,NuGetInspectorApp.Services.IDotNetService,NuGetInspectorApp.Formatters.IReportFormatter,Microsoft.Extensions.Logging.ILogger{NuGetInspectorApp.Application.NuGetAuditApplication})">
            <summary>
            Initializes a new instance of the <see cref="T:NuGetInspectorApp.Application.NuGetAuditApplication"/> class.
            </summary>
            <param name="nugetService">The service for fetching package metadata from NuGet API.</param>
            <param name="analyzer">The service for merging package information from different reports.</param>
            <param name="dotnetService">The service for executing dotnet CLI commands.</param>
            <param name="formatter">The service for formatting output reports.</param>
            <param name="logger">The logger for recording application events.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the required services is null.</exception>
        </member>
        <member name="M:NuGetInspectorApp.Application.NuGetAuditApplication.RunAsync(NuGetInspectorApp.Configuration.CommandLineOptions)">
            <summary>
            Executes the main application workflow to analyze NuGet packages.
            </summary>
            <param name="options">The command-line options specifying analysis parameters and output preferences.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains an exit code:
            0 for success, 1 for failure.
            </returns>
            <remarks>
            This method performs the following steps:
            <list type="number">
            <item><description>Executes dotnet list package commands in parallel for outdated, deprecated, and vulnerable packages</description></item>
            <item><description>Merges package information across different report types for each project and framework</description></item>
            <item><description>Applies user-specified filters (only outdated, only deprecated, only vulnerable)</description></item>
            <item><description>Fetches detailed metadata from NuGet API for all unique packages</description></item>
            <item><description>Formats the results and outputs to console or file</description></item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:NuGetInspectorApp.Application.NuGetAuditApplication.FetchAllPackageMetadataAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,NuGetInspectorApp.Models.MergedPackage}})">
            <summary>
            Fetches detailed metadata from the NuGet API for all unique packages in the merged package collection.
            </summary>
            <param name="mergedPackages">
            A dictionary containing merged package information keyed by "{ProjectPath}|{Framework}",
            with values being dictionaries of packages keyed by package ID.
            </param>
            <returns>
            A task that represents the asynchronous operation. The task result contains a dictionary
            of package metadata keyed by "{PackageId}|{Version}" for efficient lookup.
            </returns>
            <remarks>
            This method:
            <list type="bullet">
            <item><description>Identifies unique packages across all projects and frameworks to avoid duplicate API calls</description></item>
            <item><description>Uses a semaphore to limit concurrent HTTP requests to the NuGet API</description></item>
            <item><description>Handles failures gracefully by logging errors but continuing with other packages</description></item>
            <item><description>Properly disposes of the semaphore to prevent resource leaks</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:NuGetInspectorApp.Services.DotNetService">
            <summary>
            Provides functionality for executing dotnet CLI commands to retrieve package information.
            </summary>
            <remarks>
            This service wraps the execution of 'dotnet list package' commands with various flags
            to gather comprehensive package information including outdated, deprecated, and vulnerable packages.
            The service handles process execution, output capture, and JSON deserialization.
            </remarks>
        </member>
        <member name="M:NuGetInspectorApp.Services.DotNetService.#ctor(Microsoft.Extensions.Logging.ILogger{NuGetInspectorApp.Services.DotNetService})">
            <summary>
            Initializes a new instance of the <see cref="T:NuGetInspectorApp.Services.DotNetService"/> class.
            </summary>
            <param name="logger">The logger instance for recording service operations and errors.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:NuGetInspectorApp.Services.DotNetService.GetPackageReportAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a dotnet list package command and returns the parsed report.
            </summary>
            <param name="solutionPath">The path to the solution file to analyze.</param>
            <param name="reportType">The type of report to generate (e.g., "--outdated", "--deprecated", "--vulnerable").</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains a <see cref="T:NuGetInspectorApp.Models.DotnetListReport"/>
            object with the parsed package information, or <c>null</c> if the operation fails.
            </returns>
            <remarks>
            This method executes the dotnet CLI command with the specified report type and deserializes
            the JSON output into a strongly-typed object. Common report types include:
            <list type="bullet">
            <item><description>--outdated: Lists packages with newer versions available</description></item>
            <item><description>--deprecated: Lists packages marked as deprecated</description></item>
            <item><description>--vulnerable: Lists packages with known security vulnerabilities</description></item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="solutionPath"/> or <paramref name="reportType"/> is null or empty.</exception>
        </member>
        <member name="M:NuGetInspectorApp.Services.DotNetService.RunDotnetListJsonAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes the dotnet list package command and returns the raw JSON output.
            </summary>
            <param name="solution">The path to the solution file to analyze.</param>
            <param name="flag">The command flag to specify the type of package report (e.g., "--outdated", "--deprecated").</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the raw JSON output
            from the dotnet command, or <c>null</c> if the command fails or returns a non-zero exit code.
            </returns>
            <remarks>
            This method constructs and executes a dotnet CLI command with the following format:
            <c>dotnet list "{solution}" package {flag} --include-transitive --format json</c>
            <para>
            The method captures both standard output and standard error streams, logs any errors,
            and returns null if the command fails. This provides a robust foundation for the
            higher-level GetPackageReportAsync method.
            </para>
            </remarks>
        </member>
        <member name="T:NuGetInspectorApp.Services.IDotNetService">
            <summary>
            Defines the contract for executing dotnet CLI commands to retrieve package information.
            </summary>
            <remarks>
            This service interface abstracts the execution of 'dotnet list package' commands with various flags
            to gather comprehensive package information including outdated, deprecated, and vulnerable packages.
            Implementations should handle process execution, output capture, and JSON deserialization.
            </remarks>
        </member>
        <member name="M:NuGetInspectorApp.Services.IDotNetService.GetPackageReportAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a dotnet list package command and returns the parsed report.
            </summary>
            <param name="solutionPath">The path to the solution file to analyze.</param>
            <param name="reportType">The type of report to generate (e.g., "--outdated", "--deprecated", "--vulnerable").</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains a <see cref="T:NuGetInspectorApp.Models.DotnetListReport"/>
            object with the parsed package information, or <c>null</c> if the operation fails.
            </returns>
            <remarks>
            This method should execute the dotnet CLI command with the specified report type and deserialize
            the JSON output into a strongly-typed object. Common report types include:
            <list type="bullet">
            <item><description>--outdated: Lists packages with newer versions available</description></item>
            <item><description>--deprecated: Lists packages marked as deprecated</description></item>
            <item><description>--vulnerable: Lists packages with known security vulnerabilities</description></item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="solutionPath"/> or <paramref name="reportType"/> is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the dotnet CLI is not available or returns an unexpected format.</exception>
        </member>
        <member name="T:NuGetInspectorApp.Services.INuGetApiService">
            <summary>
            Provides methods for fetching package metadata from the NuGet API.
            </summary>
        </member>
        <member name="M:NuGetInspectorApp.Services.INuGetApiService.FetchPackageMetadataAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Fetches metadata for a specific package version from the NuGet API.
            </summary>
            <param name="id">The package ID.</param>
            <param name="version">The package version.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the package metadata.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="id"/> or <paramref name="version"/> is null or empty.</exception>
            <exception cref="T:System.Net.Http.HttpRequestException">Thrown when the HTTP request fails.</exception>
        </member>
        <member name="T:NuGetInspectorApp.Services.IPackageAnalyzer">
            <summary>
            Defines the contract for merging package information from multiple dotnet list reports.
            </summary>
            <remarks>
            This service interface abstracts the process of combining data from outdated, deprecated,
            and vulnerable package reports to create a unified view of package status across different
            analysis types. Implementations should handle the complexity of merging overlapping package
            information while preserving all relevant metadata from each report type.
            </remarks>
        </member>
        <member name="M:NuGetInspectorApp.Services.IPackageAnalyzer.MergePackages(System.Collections.Generic.List{NuGetInspectorApp.Models.ProjectInfo},System.Collections.Generic.List{NuGetInspectorApp.Models.ProjectInfo},System.Collections.Generic.List{NuGetInspectorApp.Models.ProjectInfo},System.String,System.String)">
             <summary>
             Merges package information from multiple dotnet list package reports for a specific project and framework.
             </summary>
             <param name="outdatedProjects">The collection of projects from the outdated packages report.</param>
             <param name="deprecatedProjects">The collection of projects from the deprecated packages report.</param>
             <param name="vulnerableProjects">The collection of projects from the vulnerable packages report.</param>
             <param name="projectPath">The file system path to the specific project to analyze.</param>
             <param name="framework">The target framework moniker to analyze within the project.</param>
             <returns>
             A dictionary of merged package information keyed by package ID, where each value contains
             consolidated information from all applicable report types.
             </returns>
             <remarks>
             This method performs the following operations:
             <list type="bullet">
             <item><description>Locates the specified project and framework in each report type</description></item>
             <item><description>Merges package version information from the outdated report</description></item>
             <item><description>Incorporates deprecation status and alternatives from the deprecated report</description></item>
             <item><description>Adds vulnerability information from the vulnerable report</description></item>
             <item><description>Returns a unified view of all packages for the specified project/framework combination</description></item>
             </list>
             If a project or framework is not found in any of the reports, appropriate warnings should be logged
             and processing should continue with available data.
             </remarks>
             <exception cref="T:System.ArgumentNullException">
             Thrown when any of the project collections (<paramref name="outdatedProjects"/>,
             <paramref name="deprecatedProjects"/>, or <paramref name="vulnerableProjects"/>) is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             Thrown when <paramref name="projectPath"/> or <paramref name="framework"/> is null or empty.
             </exception>
             <example>
             <code>
             var analyzer = new PackageAnalyzer(logger);
             var mergedPackages = analyzer.MergePackages(
                 outdatedReport.Projects,
                 deprecatedReport.Projects,
                 vulnerableReport.Projects,
                 @"C:\MyProject\MyProject.csproj",
                 "net9.0");
            
             foreach (var package in mergedPackages.Values)
             {
                 Console.WriteLine($"{package.Id}: Outdated={package.IsOutdated}, Deprecated={package.IsDeprecated}");
             }
             </code>
             </example>
        </member>
        <member name="T:NuGetInspectorApp.Services.NuGetApiService">
            <summary>
            Implements the NuGet API service for fetching package metadata.
            </summary>
        </member>
        <member name="M:NuGetInspectorApp.Services.NuGetApiService.#ctor(NuGetInspectorApp.Configuration.AppConfiguration,Microsoft.Extensions.Logging.ILogger{NuGetInspectorApp.Services.NuGetApiService})">
            <summary>
            Initializes a new instance of the <see cref="T:NuGetInspectorApp.Services.NuGetApiService"/> class.
            </summary>
            <param name="configuration">The application configuration.</param>
            <param name="logger">The logger instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> or <paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:NuGetInspectorApp.Services.NuGetApiService.FetchPackageMetadataAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:NuGetInspectorApp.Services.NuGetApiService.ExtractProjectUrl(NuGetInspectorApp.Models.PackageMetadata,System.Text.Json.JsonElement,System.Text.Json.JsonElement)">
            <summary>
            Extracts the project URL from the package metadata.
            </summary>
            <param name="meta">The package metadata to update.</param>
            <param name="details">The details JSON element.</param>
            <param name="root">The root JSON element.</param>
        </member>
        <member name="M:NuGetInspectorApp.Services.NuGetApiService.ExtractDependencyGroups(NuGetInspectorApp.Models.PackageMetadata,System.Text.Json.JsonElement)">
            <summary>
            Extracts dependency groups from the package metadata.
            </summary>
            <param name="meta">The package metadata to update.</param>
            <param name="details">The details JSON element containing dependency information.</param>
        </member>
        <member name="M:NuGetInspectorApp.Services.NuGetApiService.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:NuGetInspectorApp.Services.NuGetApiService"/>.
            </summary>
        </member>
        <member name="T:NuGetInspectorApp.Services.PackageAnalyzer">
            <summary>
            Provides functionality for merging package information from multiple dotnet list reports.
            </summary>
            <remarks>
            This service combines data from outdated, deprecated, and vulnerable package reports
            to create a unified view of package status across different analysis types.
            </remarks>
        </member>
        <member name="M:NuGetInspectorApp.Services.PackageAnalyzer.#ctor(Microsoft.Extensions.Logging.ILogger{NuGetInspectorApp.Services.PackageAnalyzer})">
            <summary>
            Initializes a new instance of the <see cref="T:NuGetInspectorApp.Services.PackageAnalyzer"/> class.
            </summary>
            <param name="logger">The logger instance for recording analysis operations.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="logger"/> is null.</exception>
        </member>
        <member name="M:NuGetInspectorApp.Services.PackageAnalyzer.MergePackages(System.Collections.Generic.List{NuGetInspectorApp.Models.ProjectInfo},System.Collections.Generic.List{NuGetInspectorApp.Models.ProjectInfo},System.Collections.Generic.List{NuGetInspectorApp.Models.ProjectInfo},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:NuGetInspectorApp.Services.PackageAnalyzer.UpsertPackages(System.Collections.Generic.Dictionary{System.String,NuGetInspectorApp.Models.MergedPackage},System.Collections.Generic.List{NuGetInspectorApp.Models.PackageReference},NuGetInspectorApp.Services.ReportType)">
            <summary>
            Updates or inserts packages into the merged package dictionary based on the report type.
            </summary>
            <param name="map">The dictionary of merged packages to update.</param>
            <param name="packages">The list of package references to process.</param>
            <param name="type">The type of report being processed.</param>
            <remarks>
            This method consolidates package information from different report types:
            <list type="bullet">
            <item><description>Outdated reports provide latest version information</description></item>
            <item><description>Deprecated reports provide deprecation status and alternatives</description></item>
            <item><description>Vulnerable reports provide security vulnerability information</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:NuGetInspectorApp.Services.ReportType">
            <summary>
            Represents the different types of package analysis reports.
            </summary>
            <remarks>
            These report types correspond to different dotnet list package command flags
            and determine how package information is processed and merged.
            </remarks>
        </member>
        <member name="F:NuGetInspectorApp.Services.ReportType.Outdated">
            <summary>
            Represents packages that have newer versions available (--outdated flag).
            </summary>
        </member>
        <member name="F:NuGetInspectorApp.Services.ReportType.Deprecated">
            <summary>
            Represents packages that have been marked as deprecated (--deprecated flag).
            </summary>
        </member>
        <member name="F:NuGetInspectorApp.Services.ReportType.Vulnerable">
            <summary>
            Represents packages that have known security vulnerabilities (--vulnerable flag).
            </summary>
        </member>
    </members>
</doc>
